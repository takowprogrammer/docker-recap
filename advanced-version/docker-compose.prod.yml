version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: student_database_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-student_db}
      POSTGRES_USER: ${POSTGRES_USER:-student_user}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./services/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - student_network
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-student_user} -d ${POSTGRES_DB:-student_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Python API Service
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    container_name: student_api_prod
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://student_user:${POSTGRES_PASSWORD}@database:5432/student_db}
      - API_USERNAME_FILE=/run/secrets/api_username
      - API_PASSWORD_FILE=/run/secrets/api_password
      - DEBUG=false
      - APP_VERSION=${APP_VERSION:-2.0.0}
      - PORT=5000
    depends_on:
      database:
        condition: service_healthy
    networks:
      - student_network
    secrets:
      - api_username
      - api_password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # PHP Web Application
  webapp:
    build:
      context: ./services/webapp
      dockerfile: Dockerfile
    container_name: student_webapp_prod
    environment:
      - API_URL=${API_URL:-http://api:5000}
      - API_USERNAME_FILE=/run/secrets/api_username
      - API_PASSWORD_FILE=/run/secrets/api_password
      - DEBUG=false
      - APP_VERSION=${APP_VERSION:-2.0.0}
      - APP_TITLE=${APP_TITLE:-POZOS Student Management}
    depends_on:
      api:
        condition: service_healthy
    networks:
      - student_network
    secrets:
      - api_username
      - api_password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health.php"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: student_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/ssl:/etc/nginx/ssl:ro
    depends_on:
      - webapp
      - api
    networks:
      - student_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data_prod:
    driver: local

networks:
  student_network:
    driver: bridge
    name: student_network

secrets:
  postgres_password:
    file: ./configs/secrets/postgres_password.txt
  api_username:
    file: ./configs/secrets/api_username.txt
  api_password:
    file: ./configs/secrets/api_password.txt
