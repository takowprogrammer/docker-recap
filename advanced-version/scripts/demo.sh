#!/bin/bash
# Demonstration script for Docker concepts

echo "üéì Docker DevOps Demonstration"
echo "=============================="
echo ""

# Function to show menu
show_menu() {
    echo "Select demonstration phase:"
    echo "1. Basic Version (Simple Docker setup)"
    echo "2. Advanced Version (Production-ready setup)"
    echo "3. Compare both versions"
    echo "4. Show Docker concepts"
    echo "5. Exit"
    echo ""
    read -p "Enter your choice (1-5): " choice
}

# Function to show basic version
show_basic() {
    echo ""
    echo "üìö BASIC VERSION DEMONSTRATION"
    echo "=============================="
    echo ""
    echo "This version demonstrates:"
    echo "‚Ä¢ Simple containerization"
    echo "‚Ä¢ Basic Docker networking"
    echo "‚Ä¢ Volume mounting"
    echo "‚Ä¢ Single environment configuration"
    echo ""
    echo "Files structure:"
    echo "basic-version/"
    echo "‚îú‚îÄ‚îÄ simple_api/          # Python Flask API"
    echo "‚îú‚îÄ‚îÄ website/             # PHP web application"
    echo "‚îú‚îÄ‚îÄ docker-compose.yml   # Simple orchestration"
    echo "‚îî‚îÄ‚îÄ README.md            # Documentation"
    echo ""
    echo "To run:"
    echo "cd basic-version && docker-compose up -d"
    echo ""
}

# Function to show advanced version
show_advanced() {
    echo ""
    echo "üöÄ ADVANCED VERSION DEMONSTRATION"
    echo "================================="
    echo ""
    echo "This version demonstrates:"
    echo "‚Ä¢ Multi-stage builds"
    echo "‚Ä¢ Environment configuration"
    echo "‚Ä¢ Health checks"
    echo "‚Ä¢ Database integration"
    echo "‚Ä¢ Secrets management"
    echo "‚Ä¢ Image registry"
    echo "‚Ä¢ Reverse proxy (Nginx)"
    echo "‚Ä¢ Production readiness"
    echo ""
    echo "Files structure:"
    echo "advanced-version/"
    echo "‚îú‚îÄ‚îÄ services/"
    echo "‚îÇ   ‚îú‚îÄ‚îÄ api/             # Multi-stage Python API"
    echo "‚îÇ   ‚îú‚îÄ‚îÄ webapp/          # Enhanced PHP app"
    echo "‚îÇ   ‚îú‚îÄ‚îÄ database/        # PostgreSQL setup"
    echo "‚îÇ   ‚îî‚îÄ‚îÄ nginx/           # Reverse proxy"
    echo "‚îú‚îÄ‚îÄ configs/"
    echo "‚îÇ   ‚îú‚îÄ‚îÄ environments/    # Environment configs"
    echo "‚îÇ   ‚îî‚îÄ‚îÄ secrets/         # Secrets management"
    echo "‚îú‚îÄ‚îÄ scripts/             # Automation scripts"
    echo "‚îî‚îÄ‚îÄ docker-compose.yml   # Production orchestration"
    echo ""
    echo "To run:"
    echo "cd advanced-version && ./scripts/start-dev.sh"
    echo ""
}

# Function to compare versions
compare_versions() {
    echo ""
    echo "üîÑ VERSION COMPARISON"
    echo "===================="
    echo ""
    echo "BASIC VERSION:"
    echo "‚Ä¢ 2 containers (API + Webapp)"
    echo "‚Ä¢ Simple networking"
    echo "‚Ä¢ JSON file storage"
    echo "‚Ä¢ Single environment"
    echo "‚Ä¢ Basic security"
    echo "‚Ä¢ No health monitoring"
    echo ""
    echo "ADVANCED VERSION:"
    echo "‚Ä¢ 6+ containers (API + Webapp + DB + Nginx + Registry + UI)"
    echo "‚Ä¢ Complex networking with reverse proxy"
    echo "‚Ä¢ PostgreSQL database"
    echo "‚Ä¢ Multiple environments (dev/prod)"
    echo "‚Ä¢ Secrets management"
    echo "‚Ä¢ Health monitoring"
    echo "‚Ä¢ Image registry"
    echo "‚Ä¢ Production-ready"
    echo ""
}

# Function to show Docker concepts
show_concepts() {
    echo ""
    echo "üê≥ DOCKER CONCEPTS DEMONSTRATED"
    echo "==============================="
    echo ""
    echo "1. CONTAINERIZATION:"
    echo "   ‚Ä¢ Isolating applications"
    echo "   ‚Ä¢ Consistent environments"
    echo "   ‚Ä¢ Resource efficiency"
    echo ""
    echo "2. ORCHESTRATION:"
    echo "   ‚Ä¢ Docker Compose"
    echo "   ‚Ä¢ Service dependencies"
    echo "   ‚Ä¢ Health checks"
    echo ""
    echo "3. NETWORKING:"
    echo "   ‚Ä¢ Custom networks"
    echo "   ‚Ä¢ Service discovery"
    echo "   ‚Ä¢ Load balancing"
    echo ""
    echo "4. STORAGE:"
    echo "   ‚Ä¢ Volumes"
    echo "   ‚Ä¢ Data persistence"
    echo "   ‚Ä¢ Database integration"
    echo ""
    echo "5. SECURITY:"
    echo "   ‚Ä¢ Non-root containers"
    echo "   ‚Ä¢ Secrets management"
    echo "   ‚Ä¢ Network isolation"
    echo ""
    echo "6. PRODUCTION READINESS:"
    echo "   ‚Ä¢ Multi-stage builds"
    echo "   ‚Ä¢ Environment configuration"
    echo "   ‚Ä¢ Monitoring and logging"
    echo "   ‚Ä¢ Image registry"
    echo ""
}

# Main loop
while true; do
    show_menu
    case $choice in
        1) show_basic ;;
        2) show_advanced ;;
        3) compare_versions ;;
        4) show_concepts ;;
        5) echo "Goodbye! üëã"; exit 0 ;;
        *) echo "Invalid choice. Please try again." ;;
    esac
    echo ""
    read -p "Press Enter to continue..."
    clear
done
